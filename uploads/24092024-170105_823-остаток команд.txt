экран с деталями  платежа, тот, что сразу после оплаты

const getPaymentDetails = () => {
    request(undefined, {
            "command": "users.parent_payment_data",
	     "userId": `${userId}`,
            я не понимаю на какого ребенка будт открываться этот экран, если детей несколько, нужно ли ставть id ребенка?
          }).then(res => {
          	"startDate",
		"plan",
		"price",
		"promoCode",
		"totalPrice"-сколько списали с примененным промиком
          })
          .catch(error => {
            console.error(error)
          })
  }

загрузка фото родителя

const setParentPhoto = () => {
    request(undefined, {
            "command": "users.parent_payment_data",
	     "userId": `${userId}`,
	      "photo: "photo"
          }).then(res => {

		
          })
          .catch(error => {
            console.error(error)
          })
  }

 const  changeParent = () => {
        request(undefined, {
             "command": "users.parent_data_change",
	     "id": `${userId}`,
             "number": `${currentPhone.replace(/[^\d]/g, '')}`,
             "age": `${currentAge}`,
	     "name": `${currentName}`
	     "photo" -добавляем сюда
          }).then(res => {
          console.log(res)
          setFlag(!flag)
          })
          .catch(error => {
            console.error(error)
        })
    }

загрузка фото ребенка должна быть осуществлена на командах отправления ребенка

 const changeChild = () => {
        request(undefined, {
            "command": "users.child_data_change",
            "id":  `${childId}`,
            "weight":  `${currentWeight}`,
            "height":  `${currentHeight}`,
            "age":  `${selectedDate}`,
            "name":  `${currentName}`,
            "activities":  `${activitiesList}`,
            "photo": `${currentImage}` - не работает
        }).then(res => {
            console.log(res)
            setVisibleThanks(true)
        })
        .catch(error => {
            console.error(error)
        })
    }

надо еще, чтоб тут работало:

 const setChild = (childNum) => {
        request(undefined, {
          "command": "users.add_child",
          "userId": `${userId}`,
          "plan": `${plan}`,
          "gender": `${childArray[childNum].gender}`,
          "photo": `${childArray[childNum].photo}`,
          "name": `${childArray[childNum].name}`,
          "lastName": `${childArray[childNum].lastName}`,
          "age": `${childArray[childNum].age}`,
          "nickName": `${childArray[childNum].nickName}`,
          "weight": `${childArray[childNum].currentWeight}`,
          "height": `${childArray[childNum].currentHeight}`,
          "heroes": `${childArray[childNum].favoriteHeroes}`,
          "food": `${childArray[childNum].favoriteFood}`,
          "activities": `${childArray[childNum].activities}`,
          "allergens": `${childArray[childNum].allergies}`,
          "startDay": `${childArray[childNum].startDay}`,
          "deliveryTime": `${childArray[childNum].deliveryTime}` ,
          "email": `${email}`,
          "area": `${deliveryArrayForBackend}`,
          "promocode": `${promo}`,
          "paymentMethod": `${method}`
        }).then(res => {
          console.log(res)
          childNum = childNum + 1 ;

          if(childNum < childArray.length) {
            setChild(childNum)
          } else {
            navigation.navigate('Thanks')
          }
        }).catch(err => { console.log(err)})
      }

смена времени доставки

const changeDeliveryTime = () => {
    request(undefined, {
            "command": "users.change_delivery_time",
	     "childId": `${childId}`,
	      "deliveryTime": "1"
          }).then(res => {

		
          })
          .catch(error => {
            console.error(error)
          })
  }

получение адресов доставки:

const getDeliveryAddresses = () => {
    request(undefined, {
            "command": "users.get_delivery_addresses",
	     "childId": `${childId}`,
          }).then(res => {
		[
                    {
                        litera: 'A',
                        address: 'Collective, Buiding B, 602 Dubai',
                        active: true,
                        ID: 0
                    },
                    {
                        litera: 'D',
                        address: 'Collective, Buiding B, 602 Dubai',
                        active: false,
                        ID: 1
                    },
                    {
                        litera: 'C',
                        address: 'Collective, Buiding B, 602 Dubai',
                        active: false,
                        ID: 2
                    },
                ],

		в таком виде должна получить ответ
		все данные, кроме id приходят тебе строкой
		разберешь ее так?
		
          })
          .catch(error => {
            console.error(error)
          })
  }

добавление адреса: 

const addChildAdress = () => {
    request(undefined, {
            "command": "users.add_child_address",
	     "childId": `${childId}`,
	     "address": "string"
          }).then(res => {
		
		
          })
          .catch(error => {
            console.error(error)
          })
  }

удаление адреса: 

const removeChildAdress = () => {
    request(undefined, {
            "command": "users.remove_child_address",
	     "childId": `${childId}`,
	     "addressId": "2"
          }).then(res => {
		
		
          })
          .catch(error => {
            console.error(error)
          })
  }

смена активного адреса:

const cnageChildAddress = () => {
    request(undefined, {
            "command": "users.change_child_address",
	     "childId": `${childId}`,
	     "addressId": "2"

          }).then(res => {
		поле active для адреса с переданным id должно стать true, у остальных false
		
          })
          .catch(error => {
            console.error(error)
          })
  }

любимые блюда, получение

const getFavoriteDishes = () => {
    request(undefined, {
            "command": "users.get_favorite_dishes",
	     "childId": `${childId}`,

          }).then(res => {
		массив с блюдами, где каждое сожержит
		
		"title",
		"arabian",
		"rating",
		"pro",
		"fat",
		"kcal",
		"carb"
          })
          .catch(error => {
            console.error(error)
          })
  }


любимые блюда, добавление блюда в любимые

const addFavoriteDishes = () => {
    request(undefined, {
            "command": "users.add_favorite_dishes",
	     "childId": `${childId}`,
	     "dishId": `${dishId}`,
          }).then(res => {
		
          })
          .catch(error => {
            console.error(error)
          })
  }

любимые блюда, удаление блюда из любимых

const addFavoriteDishes = () => {
    request(undefined, {
            "command": "users.add_favorite_dishes",
	     "childId": `${childId}`,
	     "dishId": `${dishId}`,
          }).then(res => {
		
          })
          .catch(error => {
            console.error(error)
          })
  }


там, где мы изменяем блюдо, просматриваем его из личного кабинета ребнка, надо получать, является ли ооно любимым
для этого  в   "command": "dish.get_dish" надо добавить в ответе is Favorive: true / false

